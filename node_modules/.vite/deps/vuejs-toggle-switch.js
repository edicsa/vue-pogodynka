import {
  Fragment,
  createBaseVNode,
  createElementBlock,
  normalizeClass,
  normalizeStyle,
  openBlock,
  renderList,
  toDisplayString
} from "./chunk-KBVZHBZ4.js";
import "./chunk-OL3AADLO.js";

// node_modules/vuejs-toggle-switch/dist/vuejs-toggle-switch.js
var O = (e, l) => {
  const t = e.__vccOpts || e;
  for (const [o, i] of l)
    t[o] = i;
  return t;
};
var d = (e) => e + "rem";
var b = {
  name: "ToggleSwitch",
  props: {
    options: {
      type: Object,
      required: false
    },
    modelValue: {
      type: String,
      required: false
    },
    name: {
      type: String,
      required: false
    },
    group: {
      type: String,
      required: false,
      default: ""
    },
    disabled: {
      type: Boolean,
      required: false,
      default: false
    }
  },
  emits: ["update:modelValue"],
  created() {
    this.defaultOptions = {
      layout: {
        color: "black",
        backgroundColor: "lightgray",
        selectedColor: "white",
        selectedBackgroundColor: "green",
        borderColor: "gray",
        fontFamily: "Arial",
        fontWeight: "normal",
        fontWeightSelected: "bold",
        squareCorners: false,
        noBorder: false
      },
      size: {
        fontSize: 1.5,
        height: 3.25,
        padding: 0.5,
        width: 10
      },
      config: {
        preSelected: "unknown",
        disabled: false,
        items: [
          { name: "Off", value: "Off", color: "white", backgroundColor: "red" },
          { name: "On", value: "On", color: "white", backgroundColor: "green" }
        ]
      }
    };
  },
  mounted() {
    this.options !== null && this.options !== void 0 && this.mergeDefaultOptionsWithProp(this.options), this.defaultOptions.config.preSelected !== "unknown" ? (this.selectedItem = this.defaultOptions.config.preSelected, this.$emit("update:modelValue", this.selectedItem), this.$emit("input", this.selectedItem)) : this.modelValue && (this.selectedItem = this.modelValue, this.$emit("update:modelValue", this.selectedItem), this.$emit("input", this.selectedItem));
  },
  data() {
    return {
      selected: false,
      selectedItem: "unknown",
      defaultOptions: Object
    };
  },
  computed: {
    toggleSwitchStyle() {
      return {
        width: d(this.defaultOptions.size.width),
        height: d(this.defaultOptions.size.height)
      };
    },
    itemStyle() {
      return {
        width: d(this.defaultOptions.size.width),
        height: d(this.defaultOptions.size.height),
        fontFamily: this.defaultOptions.layout.fontFamily,
        fontSize: d(this.defaultOptions.size.fontSize),
        textAlign: "center"
      };
    },
    labelStyle() {
      return {
        padding: d(this.defaultOptions.size.padding),
        borderColor: this.defaultOptions.layout.noBorder ? "transparent" : this.defaultOptions.layout.borderColor,
        backgroundColor: this.defaultOptions.layout.backgroundColor,
        color: this.defaultOptions.layout.color,
        fontWeight: this.defaultOptions.layout.fontWeight
      };
    }
  },
  methods: {
    toggle(e) {
      this.defaultOptions.config.disabled || (this.selected = true, this.selectedItem = e.target.id.replace(this.group, ""), this.$emit("selected", this.selected), this.$emit("update:modelValue", e.target.id.replace(this.group, "")), this.$emit("input", this.selectedItem), this.$emit("change", {
        value: e.target.id.replace(this.group, ""),
        srcEvent: e
      }));
    },
    labelStyleSelected(e, l) {
      return {
        padding: d(this.defaultOptions.size.padding),
        borderColor: this.defaultOptions.layout.noBorder ? "transparent" : this.defaultOptions.layout.borderColor,
        fontWeight: this.defaultOptions.layout.fontWeightSelected,
        backgroundColor: l !== void 0 ? l : this.defaultOptions.layout.selectedBackgroundColor,
        color: e !== void 0 ? e : this.defaultOptions.layout.selectedColor
      };
    },
    mergeDefaultOptionsWithProp(e) {
      var l = this.defaultOptions;
      for (var t in e)
        if (e[t] !== null && typeof e[t] == "object")
          for (var o in e[t])
            e[t][o] !== void 0 && e[t][o] !== null && (l[t][o] = e[t][o]);
        else
          l[t] = e[t];
    }
  },
  watch: {
    modelValue(e) {
      this.selectedItem = e;
    },
    options(e) {
      e != null && this.mergeDefaultOptionsWithProp(e);
    }
  }
};
var S = ["disabled", "id", "value", "name"];
var k = ["for"];
var C = ["for"];
function w(e, l, t, o, i, a) {
  return openBlock(), createElementBlock("div", null, [
    createBaseVNode("ul", {
      class: normalizeClass(["toggle-switch", { square: i.defaultOptions.layout.squareCorners }]),
      style: normalizeStyle(a.toggleSwitchStyle)
    }, [
      (openBlock(true), createElementBlock(Fragment, null, renderList(i.defaultOptions.config.items, (s, g) => (openBlock(), createElementBlock("li", {
        style: normalizeStyle(a.itemStyle),
        key: g
      }, [
        createBaseVNode("input", {
          disabled: i.defaultOptions.config.disabled || t.disabled,
          id: s.value + t.group,
          value: s.value,
          name: t.name,
          class: normalizeClass({ active: !i.defaultOptions.config.disabled || t.disabled }),
          type: "radio",
          onClick: l[0] || (l[0] = (...m) => a.toggle && a.toggle(...m))
        }, null, 10, S),
        s.value === i.selectedItem ? (openBlock(), createElementBlock("label", {
          key: 0,
          style: normalizeStyle(a.labelStyleSelected(s.color, s.backgroundColor)),
          class: normalizeClass([{ active: !i.defaultOptions.config.disabled || t.disabled }, "selected"]),
          for: s.value + t.group,
          type: "radio"
        }, toDisplayString(s.name), 15, k)) : (openBlock(), createElementBlock("label", {
          key: 1,
          style: normalizeStyle(a.labelStyle),
          class: normalizeClass({ active: !i.defaultOptions.config.disabled || t.disabled }),
          for: s.value + t.group,
          type: "radio"
        }, toDisplayString(s.name), 15, C))
      ], 4))), 128))
    ], 6)
  ]);
}
var _ = O(b, [["render", w]]);
export {
  _ as ToggleSwitch
};
//# sourceMappingURL=vuejs-toggle-switch.js.map
